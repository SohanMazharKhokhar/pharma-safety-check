{
  "name": "Pharma Security Check Working Option 2",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "drug-interactions",
        "responseMode": "responseNode",
        "options": {
          "responseHeaders": {
            "entries": [
              {
                "name": "Access-Control-Allow-Origin",
                "value": "*"
              },
              {
                "name": "Access-Control-Allow-Headers",
                "value": "Content-Type"
              },
              {
                "name": "Access-Control-Allow-Methods",
                "value": "POST, OPTIONS"
              }
            ]
          }
        }
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2.1,
      "position": [
        -464,
        -16
      ],
      "id": "dbbe9d02-f882-4530-b09a-929f6ff9758f",
      "name": "Webhook",
      "webhookId": "4a4f3024-dbdb-47eb-ac6b-1077e29a309a"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        128,
        160
      ],
      "id": "413de8a9-6426-4815-a8ff-3396511e18bb",
      "name": "Google Gemini Chat Model",
      "credentials": {
        "googlePalmApi": {
          "id": "wD7tgz4itEG3Kmdp",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Get meds array from webhook body\nconst meds = $json[\"body\"]?.meds || [];\nconst items = [];\n\n// Case 1: Handle single medication for information lookup\nif (meds.length === 1) {\n    // If only one drug is selected, create a single item for general information lookup\n    items.push({\n        drug: meds[0], // Store the single drug\n        query_type: \"info_lookup\" // Flag for the next node\n    });\n\n} \n// Case 2: Handle two or more medications for dynamic interaction checking (Pairing)\nelse if (meds.length >= 2) {\n    // This nested loop is the core dynamic pairing logic\n    for (let i = 0; i < meds.length; i++) {\n        for (let j = i + 1; j < meds.length; j++) {\n            // Create a unique pair for every combination\n            items.push({\n                drug1: meds[i],\n                drug2: meds[j],\n                query_type: \"interaction_check\" // Flag for the next node\n            });\n        }\n    }\n} else {\n    // Handle case where no medications are sent\n    return [];\n}\n\n// Return the constructed array of items. \n// n8n will process each item (pair or info request) separately.\nreturn items.map(p => ({ json: p }));"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -96,
        -16
      ],
      "id": "e63bf8f0-a990-42ed-a7b3-3080fbe64de6",
      "name": "Code"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=You are a medical drug interaction checker. \nAnalyze the interaction between the following two drugs: \n{{ $json.drug1 }} and {{ $json.drug2 }}\n\nOutput ONLY in this JSON format:\n\n[\n  {\n    \"drug1\": \"{{ $json.drug1 }}\",\n    \"drug2\": \"{{ $json.drug2 }}\",\n    \"severity\": \"safe\" | \"moderate\" | \"critical\",\n    \"message\": \"Explain the interaction in 1–2 sentences\"\n  }\n]\n\nRules:\n- Always return a JSON array with exactly one object.\n- Do not include extra commentary or text outside JSON.\n",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        240,
        -16
      ],
      "id": "e1c025fc-0962-44d4-b5cd-0c9560f0bbb8",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "jsCode": "// Normalization helpers\nfunction normalizeSeverity(val) {\n  if (!val) return \"safe\";\n  const s = val.toLowerCase();\n  if ([\"danger\", \"severe\", \"high\"].includes(s)) return \"danger\";\n  if ([\"moderate\", \"caution\"].includes(s)) return \"moderate\";\n  return \"safe\";\n}\n\nfunction normalizeMessage(msg, fallback) {\n  return msg && msg.trim().length > 0\n    ? msg.trim()\n    : fallback;\n}\n\nconst all = [];\nconst debug = [];\n\nfor (const item of items) {\n  let raw = item.json.output || \"\";\n  raw = raw.replace(/```json|```/g, \"\").trim();\n\n  try {\n    const parsed = JSON.parse(raw);\n\n    if (Array.isArray(parsed)) {\n      for (const entry of parsed) {\n        // Pairwise case\n        if (entry.drug1 && entry.drug2) {\n          const obj = {\n            drugs: [entry.drug1, entry.drug2],\n            severity: normalizeSeverity(entry.severity),\n            message: normalizeMessage(entry.message, \"No significant interaction identified.\")\n          };\n          all.push(obj);\n          debug.push({ ...obj, source: \"AI\" });\n        }\n        // Multi-drug case\n        else if (Array.isArray(entry.drugs)) {\n          const obj = {\n            drugs: entry.drugs,\n            severity: normalizeSeverity(entry.severity),\n            message: normalizeMessage(entry.message, \"No clinically significant interactions identified.\")\n          };\n          all.push(obj);\n          debug.push({ ...obj, source: \"AI\" });\n        }\n        // Single-drug case\n        else if (entry.drug) {\n          const obj = {\n            drugs: [entry.drug],\n            severity: normalizeSeverity(entry.severity),\n            message: normalizeMessage(entry.message, \"No clinically significant interactions identified.\")\n          };\n          all.push(obj);\n          debug.push({ ...obj, source: \"AI\" });\n        }\n      }\n    }\n  } catch (e) {\n    console.error(\"Parse error:\", e, raw);\n    const fallback = {\n      drugs: [],\n      severity: \"safe\",\n      message: \"No clinically significant interactions identified (fallback).\"\n    };\n    all.push(fallback);\n    debug.push({ ...fallback, source: \"fallback\" });\n  }\n}\n\n// Deduplicate by drugs+message combo\nconst seen = new Set();\nconst deduped = all.filter(obj => {\n  const key = JSON.stringify([obj.drugs.sort(), obj.severity, obj.message]);\n  if (seen.has(key)) return false;\n  seen.add(key);\n  return true;\n});\n\n// Ensure at least one safe default\nif (deduped.length === 0) {\n  const fallback = {\n    drugs: [],\n    severity: \"safe\",\n    message: \"No clinically significant interactions identified (default).\"\n  };\n  deduped.push(fallback);\n  debug.push({ ...fallback, source: \"fallback\" });\n}\n\n// Compute flagged interactions\nconst flagged = deduped.filter(r => r.severity !== \"safe\");\n\nreturn [\n  {\n    json: {\n      summary: flagged.length > 0\n        ? \"⚠️ Some interactions may require caution. Please review the details below.\"\n        : \"✅ All checked combinations appear safe.\",\n      scanCount: deduped.length,\n      interactions: deduped,  // all interactions collected\n      debug\n    }\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        608,
        -272
      ],
      "id": "3ad45e31-c990-47e9-80b6-d3e46fd7e050",
      "name": "Code1"
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json.interactions }}",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        976,
        -16
      ],
      "id": "4059b2b8-2cb5-4267-9f74-952b5bcf3d9e",
      "name": "Respond to Webhook"
    },
    {
      "parameters": {
        "jsCode": "// Assume incoming data looks like:\n// { \"meds\": [\"Omeprazole\", \"Metformin\", \"Losartan\", \"Gabapentin\"] }\n\nconst medsArray = items[0].json.meds || [];\nconst medsString = medsArray.join(\", \");\n\nreturn [\n  {\n    json: {\n      meds: medsString\n    }\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        32,
        -432
      ],
      "id": "e0570ca5-b0c9-435b-b380-85d141fc295d",
      "name": "Meds"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=You are a medical drug interaction checker. \nAnalyze the interaction when multiple drugs are taken together. \nInput: {{ $json.meds }}\n\nOutput ONLY in this JSON format:\n\n[\n  {\n    \"drugs\": [list of drugs],\n    \"severity\": \"safe\" | \"moderate\" | \"critical\",\n    \"message\": \"Explain the interaction in 1–2 sentences\"\n  }\n]\n\nRules:\n- Always return an array, even if only one result.\n- If all combinations are safe, still return one JSON object with:\n  {\n    \"drugs\": [list of all drugs],\n    \"severity\": \"safe\",\n    \"message\": \"No clinically significant interactions identified.\"\n  }\n- Do not include extra commentary or text outside JSON.\n",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        224,
        -432
      ],
      "id": "a1e7d96a-bb86-4f18-8a36-9bcfcff9c016",
      "name": "AI Agent1"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        144,
        -240
      ],
      "id": "c405198a-9438-46fc-b412-b838619db1a1",
      "name": "Google Gemini Chat Model1",
      "credentials": {
        "googlePalmApi": {
          "id": "wD7tgz4itEG3Kmdp",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          },
          {
            "node": "Meds",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "Code1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code1": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Meds": {
      "main": [
        [
          {
            "node": "AI Agent1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent1",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent1": {
      "main": [
        [
          {
            "node": "Code1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "344c6e4d-c129-474a-90d8-39a7336afe1e",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "a24f3bb906af7603454959099c742f97403d5a0a1b22253bb8f3bc8ad4ff6be3"
  },
  "id": "euj0AQNAGkdLYpMf",
  "tags": [
    {
      "name": "Working with Medicines",
      "id": "FjEKYpRwNs6lTMXz",
      "createdAt": "2025-10-02T17:43:11.444Z",
      "updatedAt": "2025-10-02T17:43:11.444Z"
    }
  ]
}